package edu.kit.ipd.sdq.kamp4attack.tests.change.vulnerability.scalability;

import java.util.stream.Collectors;

import org.palladiosimulator.pcm.allocation.Allocation;
import org.palladiosimulator.pcm.confidentiality.attacker.helper.VulnerabilityHelper;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.AttackerSpecification;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.AttackerSystemSpecificationContainer;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.pcmIntegration.PcmIntegrationFactory;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.pcmIntegration.VulnerabilitySystemIntegration;
import org.palladiosimulator.pcm.resourceenvironment.ResourceContainer;
import org.palladiosimulator.pcm.resourceenvironment.ResourceEnvironment;
import org.palladiosimulator.pcm.resourceenvironment.ResourceenvironmentFactory;
import org.palladiosimulator.pcm.system.System;

public class ChainedResourcesTests extends ScalabilityTests {

    @Override
    protected String getFilename() {
        return "chain.csv";
    }

    protected ResourceContainer resourceAddOperation(ResourceEnvironment environment, ResourceContainer origin,
            VulnerabilitySystemIntegration integration) {
        var resource = ResourceenvironmentFactory.eINSTANCE.createResourceContainer();
        var linking = ResourceenvironmentFactory.eINSTANCE.createLinkingResource();

        linking.getConnectedResourceContainers_LinkingResource().add(origin);
        linking.getConnectedResourceContainers_LinkingResource().add(resource);

        var pcmElement = PcmIntegrationFactory.eINSTANCE.createPCMElement();
        pcmElement.setResourcecontainer(resource);
        integration.setPcmelement(pcmElement);

        environment.getLinkingResources__ResourceEnvironment().add(linking);
        environment.getResourceContainer_ResourceEnvironment().add(resource);

        return resource;
    }

    @Override
    protected void perform(System assembly, AttackerSpecification attacker, Allocation allocation,
            ResourceEnvironment environment, int numberAddition, AttackerSystemSpecificationContainer attacks) {
        var origin = environment.getResourceContainer_ResourceEnvironment().get(1);

        var vulnerabilitySpecification = attacks.getVulnerabilities().stream()
                .filter(VulnerabilitySystemIntegration.class::isInstance)
                .map(VulnerabilitySystemIntegration.class::cast).collect(Collectors.toList());
        var vulnerability = VulnerabilityHelper.getVulnerabilities(vulnerabilitySpecification, origin);

        for (var i = 0; i < numberAddition; i++) {

            var integration = PcmIntegrationFactory.eINSTANCE.createVulnerabilitySystemIntegration();
            integration.setVulnerability(vulnerability.get(0));

            origin = resourceAddOperation(environment, origin, integration);
            attacks.getVulnerabilities().add(integration);
        }
    }
}
