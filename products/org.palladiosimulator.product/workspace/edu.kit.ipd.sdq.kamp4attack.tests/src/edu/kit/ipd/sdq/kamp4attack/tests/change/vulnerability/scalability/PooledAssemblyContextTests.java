package edu.kit.ipd.sdq.kamp4attack.tests.change.vulnerability.scalability;

import java.util.stream.Collectors;

import org.palladiosimulator.pcm.allocation.Allocation;
import org.palladiosimulator.pcm.allocation.AllocationFactory;
import org.palladiosimulator.pcm.confidentiality.attacker.helper.VulnerabilityHelper;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.AttackerSpecification;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.AttackerSystemSpecificationContainer;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.pcmIntegration.PcmIntegrationFactory;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.pcmIntegration.VulnerabilitySystemIntegration;
import org.palladiosimulator.pcm.core.composition.AssemblyConnector;
import org.palladiosimulator.pcm.core.composition.CompositionFactory;
import org.palladiosimulator.pcm.repository.RepositoryFactory;
import org.palladiosimulator.pcm.resourceenvironment.ResourceEnvironment;
import org.palladiosimulator.pcm.resourceenvironment.ResourceenvironmentFactory;
import org.palladiosimulator.pcm.system.System;

public class PooledAssemblyContextTests extends ScalabilityTests {

    @Override
    protected void perform(System assembly, AttackerSpecification attacker, Allocation allocation,
            ResourceEnvironment environment, int numberAddition, AttackerSystemSpecificationContainer attacks) {

        var originResource = environment.getResourceContainer_ResourceEnvironment().get(1);
        var vulnerabilitySpecification = attacks.getVulnerabilities().stream()
                .filter(VulnerabilitySystemIntegration.class::isInstance)
                .map(VulnerabilitySystemIntegration.class::cast).collect(Collectors.toList());
        var vulnerability = VulnerabilityHelper.getVulnerabilities(vulnerabilitySpecification, originResource);

        var travelPlanner = assembly.getAssemblyContexts__ComposedStructure().get(1); // TravelPlanner
        var systemComponent = PcmIntegrationFactory.eINSTANCE.createSystemComponent();
        systemComponent.getAssemblycontext().add(travelPlanner);
        attacker.getAttackers().getAttacker().get(0).getCompromisedComponents().add(systemComponent);

        var rootAssembly = assembly.getAssemblyContexts__ComposedStructure().get(0); // TravelAgency

        // TravelAgency -> Airline
        var interfaceConnector = (AssemblyConnector) assembly.getConnectors__ComposedStructure().get(3);
        var operationInterface = interfaceConnector.getRequiredRole_AssemblyConnector()
                .getRequiredInterface__OperationRequiredRole(); // FlightOffers

        // StartTravelAgency
        var startAssembly = CompositionFactory.eINSTANCE.createAssemblyContext();
        startAssembly.setEncapsulatedComponent__AssemblyContext(RepositoryFactory.eINSTANCE.createBasicComponent());
        assembly.getAssemblyContexts__ComposedStructure().add(startAssembly);

        // TravelPlanner -> TravelAgency
        var travelPlannerConnector = (AssemblyConnector) assembly.getConnectors__ComposedStructure().get(1);
        travelPlannerConnector.setProvidingAssemblyContext_AssemblyConnector(startAssembly);
        var providedRole = RepositoryFactory.eINSTANCE.createOperationProvidedRole();
        providedRole.setProvidedInterface__OperationProvidedRole(operationInterface);
        travelPlannerConnector.setProvidedRole_AssemblyConnector(providedRole);

        var allocationResource = ResourceenvironmentFactory.eINSTANCE.createResourceContainer();
        var nextAllocation = AllocationFactory.eINSTANCE.createAllocationContext();
        nextAllocation.setAssemblyContext_AllocationContext(startAssembly);
        nextAllocation.setResourceContainer_AllocationContext(allocationResource);
        allocation.getAllocationContexts_Allocation().add(nextAllocation);

        var integration = PcmIntegrationFactory.eINSTANCE.createVulnerabilitySystemIntegration();
        integration.setVulnerability(vulnerability.get(0));

        var pcmElement = PcmIntegrationFactory.eINSTANCE.createPCMElement();
        pcmElement.getAssemblycontext().add(startAssembly);
        integration.setPcmelement(pcmElement);
        attacks.getVulnerabilities().add(integration);

        for (var i = 0; i < numberAddition; i++) {

            var nextAssembly = CompositionFactory.eINSTANCE.createAssemblyContext();
            nextAssembly.setEncapsulatedComponent__AssemblyContext(RepositoryFactory.eINSTANCE.createBasicComponent());
            assembly.getAssemblyContexts__ComposedStructure().add(nextAssembly);

            // StartTravelAgency -> nextAssembly
            var startConnector = CompositionFactory.eINSTANCE.createAssemblyConnector();
            startConnector.setProvidingAssemblyContext_AssemblyConnector(nextAssembly);
            startConnector.setRequiringAssemblyContext_AssemblyConnector(startAssembly);

            var startProvidedRole = RepositoryFactory.eINSTANCE.createOperationProvidedRole();
            startProvidedRole.setProvidedInterface__OperationProvidedRole(operationInterface);

            var startRequiredRole = RepositoryFactory.eINSTANCE.createOperationRequiredRole();
            startRequiredRole.setRequiredInterface__OperationRequiredRole(operationInterface);

            startConnector.setProvidedRole_AssemblyConnector(startProvidedRole);
            startConnector.setRequiredRole_AssemblyConnector(startRequiredRole);
            assembly.getConnectors__ComposedStructure().add(startConnector);

            // nextAssembly -> rootTravelAgency
            var endConnector = CompositionFactory.eINSTANCE.createAssemblyConnector();
            endConnector.setProvidingAssemblyContext_AssemblyConnector(rootAssembly);
            endConnector.setRequiringAssemblyContext_AssemblyConnector(nextAssembly);

            var endProvidedRole = RepositoryFactory.eINSTANCE.createOperationProvidedRole();
            endProvidedRole.setProvidedInterface__OperationProvidedRole(operationInterface);

            var endRequiredRole = RepositoryFactory.eINSTANCE.createOperationRequiredRole();
            endRequiredRole.setRequiredInterface__OperationRequiredRole(operationInterface);

            endConnector.setProvidedRole_AssemblyConnector(endProvidedRole);
            endConnector.setRequiredRole_AssemblyConnector(endRequiredRole);
            assembly.getConnectors__ComposedStructure().add(endConnector);

            allocationResource = ResourceenvironmentFactory.eINSTANCE.createResourceContainer();
            nextAllocation = AllocationFactory.eINSTANCE.createAllocationContext();
            nextAllocation.setAssemblyContext_AllocationContext(nextAssembly);
            nextAllocation.setResourceContainer_AllocationContext(allocationResource);
            allocation.getAllocationContexts_Allocation().add(nextAllocation);

            integration = PcmIntegrationFactory.eINSTANCE.createVulnerabilitySystemIntegration();
            integration.setVulnerability(vulnerability.get(0));

            pcmElement = PcmIntegrationFactory.eINSTANCE.createPCMElement();
            pcmElement.getAssemblycontext().add(nextAssembly);
            integration.setPcmelement(pcmElement);
            attacks.getVulnerabilities().add(integration);
        }
    }

    @Override
    protected String getFilename() {
        return "poolAC.csv";
    }
}
