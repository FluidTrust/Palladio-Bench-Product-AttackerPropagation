package edu.kit.ipd.sdq.kamp4attack.tests.change.vulnerability.scalability;

import java.util.stream.Collectors;

import org.palladiosimulator.pcm.allocation.Allocation;
import org.palladiosimulator.pcm.allocation.AllocationFactory;
import org.palladiosimulator.pcm.confidentiality.attacker.helper.VulnerabilityHelper;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.AttackerSpecification;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.AttackerSystemSpecificationContainer;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.pcmIntegration.PcmIntegrationFactory;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.pcmIntegration.VulnerabilitySystemIntegration;
import org.palladiosimulator.pcm.core.composition.AssemblyConnector;
import org.palladiosimulator.pcm.core.composition.AssemblyContext;
import org.palladiosimulator.pcm.core.composition.CompositionFactory;
import org.palladiosimulator.pcm.repository.OperationInterface;
import org.palladiosimulator.pcm.repository.RepositoryFactory;
import org.palladiosimulator.pcm.resourceenvironment.ResourceEnvironment;
import org.palladiosimulator.pcm.resourceenvironment.ResourceenvironmentFactory;
import org.palladiosimulator.pcm.system.System;

public class PooledAssemblyContextTests extends ScalabilityTests {

    @Override
    protected void perform(final System assembly, final AttackerSpecification attacker, final Allocation allocation,
            final ResourceEnvironment environment, final int numberAddition,
            final AttackerSystemSpecificationContainer attacks) {

        // Get Vulnerability
        // Resource Container only used here, so all current tests use the same vulnerability.
        final var originResource = environment.getResourceContainer_ResourceEnvironment()
            .get(1);
        final var vulnerabilitySpecification = attacks.getVulnerabilities()
            .stream()
            .filter(VulnerabilitySystemIntegration.class::isInstance)
            .map(VulnerabilitySystemIntegration.class::cast)
            .collect(Collectors.toList());
        final var vulnerability = VulnerabilityHelper.getVulnerabilities(vulnerabilitySpecification, originResource);

        // Designates the Travel Planer as a starting point for an attack.
        final var travelPlanner = assembly.getAssemblyContexts__ComposedStructure()
            .get(1); // TravelPlanner
        final var systemComponent = PcmIntegrationFactory.eINSTANCE.createSystemComponent();
        systemComponent.getAssemblycontext()
            .add(travelPlanner);
        attacker.getAttackers()
            .getAttacker()
            .get(0)
            .getCompromisedComponents()
            .add(systemComponent);

        final var rootAssembly = assembly.getAssemblyContexts__ComposedStructure()
            .get(0); // TravelAgency

        // Get the FlightOffers interface from the TravelAgency -> Airline connector
        // FlightOffers is both a provided and required interface of TravelAgency
        final var interfaceConnector = (AssemblyConnector) assembly.getConnectors__ComposedStructure()
            .get(3);
        final var operationInterface = interfaceConnector.getRequiredRole_AssemblyConnector()
            .getRequiredInterface__OperationRequiredRole(); // FlightOffers

        // Start TravelAgency for the pool. From here we will have multiple paths to the original
        // TravelAgency (rootAssembly).
        final var startAssembly = CompositionFactory.eINSTANCE.createAssemblyContext();
        startAssembly.setEncapsulatedComponent__AssemblyContext(RepositoryFactory.eINSTANCE.createBasicComponent());
        assembly.getAssemblyContexts__ComposedStructure()
            .add(startAssembly);

        // Connects the startAssembly to the TravelPlaner.
        final var travelPlannerConnector = (AssemblyConnector) assembly.getConnectors__ComposedStructure()
            .get(1);
        travelPlannerConnector.setProvidingAssemblyContext_AssemblyConnector(startAssembly);
        final var providedRole = RepositoryFactory.eINSTANCE.createOperationProvidedRole();
        providedRole.setProvidedInterface__OperationProvidedRole(operationInterface);
        travelPlannerConnector.setProvidedRole_AssemblyConnector(providedRole);

        // Create new Allocation for startAssembly
        var allocationResource = ResourceenvironmentFactory.eINSTANCE.createResourceContainer();
        var nextAllocation = AllocationFactory.eINSTANCE.createAllocationContext();
        nextAllocation.setAssemblyContext_AllocationContext(startAssembly);
        nextAllocation.setResourceContainer_AllocationContext(allocationResource);
        allocation.getAllocationContexts_Allocation()
            .add(nextAllocation);

        // Gives startAssembly a Vulnerability
        var integration = PcmIntegrationFactory.eINSTANCE.createVulnerabilitySystemIntegration();
        integration.setVulnerability(vulnerability.get(0));
        var pcmElement = PcmIntegrationFactory.eINSTANCE.createPCMElement();
        pcmElement.getAssemblycontext()
            .add(startAssembly);
        integration.setPcmelement(pcmElement);
        attacks.getVulnerabilities()
            .add(integration);

        for (var i = 0; i < numberAddition; i++) {

            final var nextAssembly = this.createAndConntectAssembly(assembly, startAssembly, rootAssembly,
                    operationInterface);

            // Create new Allocation for nextAssembly
            allocationResource = ResourceenvironmentFactory.eINSTANCE.createResourceContainer();
            nextAllocation = AllocationFactory.eINSTANCE.createAllocationContext();
            nextAllocation.setAssemblyContext_AllocationContext(nextAssembly);
            nextAllocation.setResourceContainer_AllocationContext(allocationResource);
            allocation.getAllocationContexts_Allocation()
                .add(nextAllocation);

            // Gives nextAssembly a Vulnerability
            integration = PcmIntegrationFactory.eINSTANCE.createVulnerabilitySystemIntegration();
            integration.setVulnerability(vulnerability.get(0));
            pcmElement = PcmIntegrationFactory.eINSTANCE.createPCMElement();
            pcmElement.getAssemblycontext()
                .add(nextAssembly);
            integration.setPcmelement(pcmElement);
            attacks.getVulnerabilities()
                .add(integration);
        }
    }

    private AssemblyContext createAndConntectAssembly(final System assembly, final AssemblyContext startAssembly,
            final AssemblyContext rootAssembly, final OperationInterface operationInterface) {
        final var nextAssembly = CompositionFactory.eINSTANCE.createAssemblyContext();
        nextAssembly.setEncapsulatedComponent__AssemblyContext(RepositoryFactory.eINSTANCE.createBasicComponent());
        assembly.getAssemblyContexts__ComposedStructure()
            .add(nextAssembly);

        // StartTravelAgency -> nextAssembly
        final var startConnector = CompositionFactory.eINSTANCE.createAssemblyConnector();
        startConnector.setProvidingAssemblyContext_AssemblyConnector(nextAssembly);
        startConnector.setRequiringAssemblyContext_AssemblyConnector(startAssembly);

        final var startProvidedRole = RepositoryFactory.eINSTANCE.createOperationProvidedRole();
        startProvidedRole.setProvidedInterface__OperationProvidedRole(operationInterface);

        final var startRequiredRole = RepositoryFactory.eINSTANCE.createOperationRequiredRole();
        startRequiredRole.setRequiredInterface__OperationRequiredRole(operationInterface);

        startConnector.setProvidedRole_AssemblyConnector(startProvidedRole);
        startConnector.setRequiredRole_AssemblyConnector(startRequiredRole);
        assembly.getConnectors__ComposedStructure()
            .add(startConnector);

        // nextAssembly -> rootTravelAgency
        final var endConnector = CompositionFactory.eINSTANCE.createAssemblyConnector();
        endConnector.setProvidingAssemblyContext_AssemblyConnector(rootAssembly);
        endConnector.setRequiringAssemblyContext_AssemblyConnector(nextAssembly);

        final var endProvidedRole = RepositoryFactory.eINSTANCE.createOperationProvidedRole();
        endProvidedRole.setProvidedInterface__OperationProvidedRole(operationInterface);

        final var endRequiredRole = RepositoryFactory.eINSTANCE.createOperationRequiredRole();
        endRequiredRole.setRequiredInterface__OperationRequiredRole(operationInterface);

        endConnector.setProvidedRole_AssemblyConnector(endProvidedRole);
        endConnector.setRequiredRole_AssemblyConnector(endRequiredRole);
        assembly.getConnectors__ComposedStructure()
            .add(endConnector);

        return nextAssembly;
    }

    @Override
    protected String getFilename() {
        return "poolAC.csv";
    }
}
