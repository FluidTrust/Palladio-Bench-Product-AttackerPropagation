package edu.kit.ipd.sdq.kamp4attack.tests.change.vulnerability.scalability;

import java.util.ArrayList;

import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.palladiosimulator.pcm.allocation.Allocation;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.AttackerSpecification;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.AttackerSystemSpecificationContainer;
import org.palladiosimulator.pcm.resourceenvironment.ResourceEnvironment;
import org.palladiosimulator.pcm.system.System;

import edu.kit.ipd.sdq.kamp4attack.tests.change.AbstractChangeTests;

public abstract class ScalabilityTests extends AbstractChangeTests {
    public static final int WARMUP = 0;
    public static final int REPEAT = 1;

    public ScalabilityTests() {
        this.PATH_REPOSITORY = "travelplanner/default.repository";
        this.PATH_RESOURCES = "travelplanner/default.resourceenvironment";
        this.PATH_ASSEMBLY = "travelplanner/default.system";
        this.PATH_ALLOCATION = "travelplanner/default.allocation";
        this.PATH_ATTACKER = "travelplanner/Scalability/test_model.attacker";
        this.PATH_CONTEXT = "travelplanner/Scalability/test_model.context";
        this.PATH_MODIFICATION = "travelplanner/Scalability/test_model.kamp4attackmodificationmarks";
    }

    @Disabled
    @Test
    void warmup() {
        this.runAnalysis();
    }

    @Disabled
    @Test
    void run() {

        for (var i = 0; i < WARMUP; i++) {
            this.runAnalysis();
        }

//        for (var i = 0; i < 1; i++) {
//            perform(this.environment, 1000, this.attacker.getSystemintegration());
//
//            var timeList = new ArrayList<Long>();
//
//            for (var j = 0; j < REPEAT; j++) {
//                timeList.add(analysisTime());
//            }
//
//            try (var output = Files.newBufferedWriter(Paths.get(System.getProperty("java.io.tmpdir"), getFilename()),
//                    StandardOpenOption.APPEND);) {
//                var credential = (CredentialChange) getBlackboardWrapper().getModificationMarkRepository()
//                        .getChangePropagationSteps().get(0);
//                output.append(String.format("%d,%d\n", credential.getCompromisedresource().size(),
//                        Math.round(timeList.stream().mapToLong(Long::longValue).average().getAsDouble())));
//
//            } catch (IOException e) {
//                fail(e.getMessage());
//            }
//
//        }

        this.perform(this.assembly, this.attacker, this.allocation, this.environment, 1000,
                this.attacker.getSystemintegration());
        this.writeResults();

//		perform(this.assembly, this.attacker, this.allocation, this.environment, 90,
//				this.attacker.getSystemintegration());
//		writeResults();
//		perform(this.assembly, this.attacker, this.allocation, this.environment, 900,
//				this.attacker.getSystemintegration());
//		writeResults();
//		perform(this.assembly, this.attacker, this.allocation, this.environment, 9000,
//				this.attacker.getSystemintegration());
//		writeResults();
//		perform(this.assembly, this.attacker, this.allocation, this.environment, 90000,
//				this.attacker.getSystemintegration());
//		writeResults();
    }

    private void writeResults() {
        final var timeList = new ArrayList<Long>();

        for (var j = 0; j < REPEAT; j++) {
            timeList.add(this.analysisTime());
        }

//        try (var output = Files.newBufferedWriter(Paths.get(System.getProperty("java.io.tmpdir"), getFilename()),
//                StandardOpenOption.APPEND);) {
//            var credential = (CredentialChange) getBlackboardWrapper().getModificationMarkRepository()
//                    .getChangePropagationSteps().get(0);
//            output.append(String.format("%d,%d\n", credential.getCompromisedresource().size(),
//                    Math.round(timeList.stream().mapToLong(Long::longValue).average().getAsDouble())));
//
//        } catch (IOException e) {
//            fail(e.getMessage());
//        }
    }

    long analysisTime() {
        final var startTime = java.lang.System.currentTimeMillis();
        this.runAnalysis();
        return java.lang.System.currentTimeMillis() - startTime;
    }

    protected abstract void perform(System assembly, AttackerSpecification attacker, Allocation allocation,
            ResourceEnvironment environment, int numberAddition, AttackerSystemSpecificationContainer attacks);

    protected abstract String getFilename();

}
